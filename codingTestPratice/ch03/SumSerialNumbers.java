package one;

import java.util.Scanner;

/*
 * 실행시간 : 1초
 * 문제 :
 * 어떠한 자연수 N은 몇 개의 연속된 자연수의 합으로 나타낼 수 있다. 당신은 어떤 자연수 N (1 <= N <= 10,000,000)을 몇 개의 연속된 자연수의 합으로 나타내는 가짓수를 알고 싶다.
 * N을 입력 받아 연속된 자연수의 합으로 나타내는 가짓수를 출력하는 프로그램을 작성하시오.
 * 
 * 예를들어 N = 15면
 *  1,2,3,4,5 / 4,5,6 / 7,8
 * >> 3
 * 
 * 입력 :
 * 1번째 줄에 정수 N이 주어진다.
 * 
 * 출력 :
 * 입력된 자연수 N을 연속된 자연수의 합으로 나타내는 가짓수를 출력한다.
 */

/*
 * 실행시간 1초에 검색이 필요한 자연수 N의 최대 범위는 1억(실행에 1초 소요)이기 때문에 2중 반복문은 절대 불가능이고, 자연수 N의 범위 전체를 사용하는 것도 불가능하다. 반복문 하나를 사용하는 것조차 버겁다.
 * 따라서 코드가 매우 간결해야 하고, 반복문의 사용에 매우 신중해야 한다.
 *
 * 풀이 :
 * 1. 본격적인 풀이에 앞서 계산의 흐름을 정리한다.
 * 1-1. 자연수 N의 범위는 1 <= N <= 10,000,000이다. 또, 문제의 코드 실행 제한시간은 1초이기 때문에 범위 전체를 사용할 수 없고, 2중 for 역시 사용할 수 없다.
 * 1-2. 연속된 숫자의 합은 반드시 2개 이상의 숫자를 필요로 하고,
 * 	자연수 (N/2+1) 이상의 숫자를 2개 이상 더할 경우 반드시 N을 초과하기 때문에 (N/2+1)을 초과한 범위는 계산할 필요가 없다.
 * 	따라서 계산 범위는 1 <= X <= (N/2+1)이다.
 * 1-3. 연속된 자연수의 합에 대해 판단한다.
 * 		연속된 숫자 a, b, c, d, e, f, g, h, i, ...가 있다고 가정해보자.
 *      이때, 숫자 c ~ 숫자 h의 합이 N이라 하자.
 *      c + d + e + f + g + h = N
 *      이는 아래와 같이 치환할 수 있다.
 *      c + (c+1) + (c+2) + (c+3) + .... + h = N
 *      이것은 숫자의 갯수 (h - c + 1), 첫 숫자 c, 마지막 숫자 h를 이용해서
 *       (h - c + 1)*(c + h)/2 = N
 *      으로 계산할 수 있다.
 *      이것을 c의 기준에서 정리하면
 *      c = Math.sqrt((h+0.5)*(h+0.5)-2*N) + 0.5
 *      이다.
 *      c가 자연수일 경우, 해당 h에 대응하는 (c, h)조합의 부분합 = N 으로서 성립하며, 계산의 성질상 각각의 c와 h는 중복되지 않는다.
 * 2. N을 입력 받고 제한 범위에 맞춰 조정한다.
 * 3. 조건을 만족하는 조합의 갯수를 입력할 count를 준비한다.
 * 4. 1 ~ (N/2+1) 범위 내에서 for문을 사용한다
 * 4-1. i를 h 역할로 설정하고, num을 c 역할로 설정한다. 따라서 num = Math.sqrt((i+0.5)*(i+0.5)-2*N) + 0.5 이다.
 * 4-2. 그리고 Math.floor(num)으로 소숫점을 버린 값과 num이 일치한다면, num은 소숫점이 없는 자연수이며, 이러한 자연수 c가 존재한다면 이는 (c, h)조합의 한 쌍이 성립함을 의미한다.
 * 4-3. 이러한 경우에 count를 늘린다.
 * 5. count를 출력한다.
 */

public class SumSerialNumbers {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		long N = sc.nextLong();
		N = Math.min(10000000, Math.max(0, N));
		
		int count = 0;
		
		for(int i=(N/2+1); i>0; i--) {
			
			double num = Math.sqrt((i+0.5)*(i+0.5)-2*N) + 0.5;
			
			if(num == Math.floor(num)) {
				count++;
			}
		}
		
		System.out.println(count);

	}

}
