# 파이썬은 문자와 숫자를 동시에 배열에 넣을 수도 있고, 배열 자체를 배열에 넣을 수도 있다. 심지어 각 줄마다 크기가 고정되지도 않는다.

a = [1,2,3,['a','b','c']]

print(a[0]+a[1]) # - 붙이면 배열의 뒤부터 출력

print(a[3]) # 배열 위치를 입력하면 배열 전체를 불러옴
print(a[-1][0])
print(a[3][1]) # 배열의 위치를 앞에 입력하고 배열 내의 위치를 뒤에 입력

b = [1,2,['a','b',['life','is']]]
print(b[2][2][0])

# 문자열 조합에 쓰던 방식들 대부분 사용 가능

c = [1,2,3]
d = [4,5,6]

print(c+d) # 배열끼리 이어붙이기
print(c*3) # 배열 반복해서 이어붙이기
print(len(a)) # 배열 내의 배열은 하나의 요소로 카운트

# print(a[0]+"hi") 문자와 숫자는 서로 연산이 불가능해서 오류남
print(str(a[0])+"hi") # 숫자와 문자를 서로 이어붙이려면 str()을 사용해서 a[0]에서 나오는 숫자를 문자로 전환해야 함

c[1] = 10 # 간단하게 가져와서 입력하면 배열 내 값 수정 가능
print(c)

del d[1]
del a[1:]
print(a) # del을 쓰면 중간에 삭제 가능
print(d)

d.append(6)
print(d)

d.append([2,1]) # 뒤에서부터 추가하기
print(d)

c.sort() # 순서대로 정렬. 내림차순 정렬임. 그리고 ()필수
print(c)

c.reverse()
print(c) # 오름차순 정렬

print(c.index(10))

d.insert(2,100) # 2번 위치에 100을 삽입
print(d)

d.remove(6) # 앞에서부터 해당 문자나 숫자를 찾아서 삭제. 여러 개면 그 중 맨 앞만 삭제. 만약 없으면 오류가 뜸
print(d)

d.pop() # append의 반대. 뒤에서부터 하나씩 삭제
print(d)

print(d.count(100)) # 해당 숫자가 몇 개가 들어있는지 확인

a.extend(b) # 배열 뒤에 배열을 연결해서 하나의 배열로 만듦. 반드시 배열끼리만 가능. 근데 굳이 이거 말고, + 쓰는 게 더 간결함.
print(a)

# 그리고 튜플이라고, [] 대신 () 쓰는 것도 있음. 근데 수정이 어려움. 특히 삭제가 안 됨. 자바로 따지면 public static final 같은 느낌?
# 배열끼리 더하기, 곱하기 등의 연산은 가능한데, 그렇게 해서 배열이 수정되는 게 아니라, 그러한 결과값을 가진 새로운 배열이 생겨남

